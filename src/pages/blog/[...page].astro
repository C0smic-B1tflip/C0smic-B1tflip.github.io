---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import { getAllPosts, groupPostsByYear, getSubpostsForParent } from '@/lib/data-utils'
import { Icon } from 'astro-icon/components'

import type { PaginateFunction } from 'astro'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  // Only paginate parent posts
  const parentPosts = await getAllPosts()
  return paginate(parentPosts, { pageSize: SITE.postsPerPage })
}

const { page } = Astro.props

// Get subposts for each parent post on current page
const postsWithSubposts = await Promise.all(
  page.data.map(async (post) => {
    const subposts = await getSubpostsForParent(post.id)
    return {
      ...post,
      subposts
    }
  })
)

const postsByYear = groupPostsByYear(postsWithSubposts)
const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a))
---

<Layout class="max-w-3xl">
  <PageHead slot="head" title="Blog" />
  <Breadcrumbs
    items={[
      { label: 'Blog', href: '/blog', icon: 'lucide:library-big' },
      { label: `Page ${page.currentPage}`, icon: 'lucide:book-copy' },
    ]}
  />

  <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
    {
      years.map((year) => (
        <section class="flex flex-col gap-y-4">
          <div class="font-medium">{year}</div>
          <ul class="flex flex-col gap-4">
            {postsByYear[year].map((post) => (
              <li>
                <div class="rounded-lg border bg-card p-6">
                  {/* Parent Post */}
                  <BlogCard entry={post} showInCard={false} />
                  
                  {/* Subposts */}
                  {post.subposts && post.subposts.length > 0 && (
                    <div class="mt-6 pt-4 border-t border-muted">
                      <div class="mb-3 flex items-center gap-2 text-sm text-muted-foreground">
                        <Icon name="lucide:list" class="size-4" />
                        <span class="font-medium">
                          {post.subposts.length} part{post.subposts.length === 1 ? '' : 's'} in this series:
                        </span>
                      </div>
                      <ul class="space-y-2">
                        {post.subposts.map((subpost, index) => (
                          <li>
                            <a 
                              href={`/blog/${subpost.id}`}
                              class="flex items-start gap-3 rounded-md bg-muted/30 p-3 hover:bg-muted/50 transition-colors cursor-pointer block"
                            >
                              <span class="mt-0.5 flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-xs font-medium text-primary shrink-0">
                                {index + 1}
                              </span>
                              <div class="flex-1 min-w-0">
                                <h3 class="font-medium text-sm leading-snug mb-1 hover:text-primary transition-colors">
                                  {subpost.data.title}
                                </h3>
                                {subpost.data.description && (
                                  <p class="text-xs text-muted-foreground line-clamp-2">
                                    {subpost.data.description}
                                  </p>
                                )}
                                <div class="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
                                  <time datetime={subpost.data.date.toISOString()}>
                                    {new Intl.DateTimeFormat('en-US', {
                                      month: 'short',
                                      day: 'numeric',
                                      year: 'numeric'
                                    }).format(subpost.data.date)}
                                  </time>
                                  {subpost.data.tags && subpost.data.tags.length > 0 && (
                                    <>
                                      <span>â€¢</span>
                                      <div class="flex items-center gap-1">
                                        <Icon name="lucide:tag" class="size-3" />
                                        <span>{subpost.data.tags.slice(0, 2).join(', ')}</span>
                                        {subpost.data.tags.length > 2 && (
                                          <span>+{subpost.data.tags.length - 2}</span>
                                        )}
                                      </div>
                                    </>
                                  )}
                                </div>
                              </div>
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </div>

  <PaginationComponent
    currentPage={page.currentPage}
    totalPages={page.lastPage}
    baseUrl="/blog/"
    client:load
  />
</Layout>